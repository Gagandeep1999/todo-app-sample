{"version":3,"sources":["reducers/bookReducer.js","contexts/BooksContext.js","reducers/colorReducer.js","contexts/ThemeContext.js","components/BookDetails.js","components/BookList.js","components/Navbar.js","components/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","id","uuid","filter","BooksContext","createContext","BooksContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","colorReducer","currentTheme","div","btn","input","background","body","ThemeContext","ThemeContextProvider","theme","themeDispatch","document","style","backgroundColor","BookDetails","useContext","className","onClick","onDoubleClick","BookList","length","map","key","Navbar","AddBook","useState","setTitle","onSubmit","e","preventDefault","onChange","target","placeholder","required","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0af31493.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\r\n\r\nexport const bookReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'ADD_BOOK':\r\n            return [...state, {\r\n                title: action.book.title,\r\n                id: uuid()\r\n            }]\r\n        case 'REMOVE_BOOK':\r\n            return state.filter(book => book.id !== action.id)\r\n      \r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect} from 'react';\r\nimport { bookReducer } from '../reducers/bookReducer';\r\n\r\nexport const BooksContext = createContext();\r\n\r\n\r\nconst BooksContextProvider = (props) => {\r\n    const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : [];\r\n    });\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem('books',JSON.stringify(books))\r\n    }, [books]);\r\n\r\n    return (\r\n        <BooksContext.Provider value={{books, dispatch}}>\r\n        {props.children}\r\n        </BooksContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BooksContextProvider\r\n","\r\nexport const colorReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'LIGHT':\r\n            return {\r\n                currentTheme:\"LIGHT\",\r\n                div:\"light\",\r\n                btn:\"light-btn\",\r\n                input:\"light-input\",\r\n                background:\"light-bg\",\r\n                body: \"#eaeaea\"\r\n            }\r\n        case 'DARK':\r\n            return {\r\n                currentTheme:\"DARK\",\r\n                div:\"dark\",\r\n                btn:\"dark-btn\",\r\n                input:\"dark-input\",\r\n                background:\"dark-bg\",\r\n                body: \"#2a2a2a\"\r\n            }\r\n\r\n        case 'SKY_GREEN':\r\n            return {\r\n                currentTheme:\"SKY_GREEN\",\r\n                div:\"sky-green\",\r\n                btn:\"sky-green-btn\",\r\n                input:\"sky-green-input\",\r\n                background:\"sky-green-bg\",\r\n                body: \"#008080\"\r\n            }\r\n\r\n        case 'LIGHT_RED':\r\n            return {\r\n                currentTheme:\"LIGHT_RED\",\r\n                div:\"light-red\",\r\n                btn:\"light-red-btn\",\r\n                input:\"light-red-input\",\r\n                background:\"light-red-bg\",\r\n                body: \"#ff8080\"\r\n            }\r\n\r\n        case 'DARK_RED':\r\n            return {\r\n                currentTheme:\"DARK_RED\",\r\n                div:\"dark-red\",\r\n                btn:\"dark-red-btn\",\r\n                input:\"dark-red-input\",\r\n                background:\"dark-red-bg\",\r\n                body: \"#800000\"\r\n            }\r\n\r\n        case 'PINK':\r\n            return {\r\n                currentTheme:\"PINK\",\r\n                div:\"pink\",\r\n                btn:\"pink-btn\",\r\n                input:\"pink-input\",\r\n                background:\"pink-bg\",\r\n                body: \"#ff80c0\"\r\n            }\r\n\r\n        case 'ORANGE':\r\n            return {\r\n                currentTheme:\"ORANGE\",\r\n                div:\"orange\",\r\n                btn:\"orange-btn\",\r\n                input:\"orange-input\",\r\n                background:\"orange-bg\",\r\n                body: \"#ff732f\"\r\n            }\r\n\r\n        case 'SKY_BLUE':\r\n            return {\r\n                currentTheme:\"SKY_BLUE\",\r\n                div:\"sky-blue\",\r\n                btn:\"sky-blue-btn\",\r\n                input:\"sky-blue-input\",\r\n                background:\"sky-blue-bg\",\r\n                body: \"#0080c0\"\r\n            }\r\n        \r\n            \r\n        default:\r\n            return state\r\n    }\r\n}","import React,{ createContext, useReducer, useEffect } from \"react\";\r\nimport { colorReducer } from \"../reducers/colorReducer\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n\r\n    const [theme, themeDispatch] = useReducer(colorReducer, {\r\n        currentTheme:\"LIGHT\",\r\n        div:\".light\",\r\n        btn:\".light-btn\",\r\n        input:\".light-input\",\r\n        background:\".light-bg\",\r\n        body: \"#eaeaea\"\r\n    }, () => {\r\n        const localData = localStorage.getItem('theme');\r\n        return localData ? JSON.parse(localData) : {\r\n            currentTheme:\"LIGHT\",\r\n            div:\".light\",\r\n            btn:\".light-btn\",\r\n            input:\".light-input\",\r\n            background:\".light-bg\",\r\n            body: \"#eaeaea\"\r\n        };\r\n    });\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem('theme',JSON.stringify(theme));\r\n        document.body.style.backgroundColor = theme.body\r\n    }, [theme]);\r\n\r\n    return(\r\n        <ThemeContext.Provider value={{theme, themeDispatch}}>\r\n        {props.children}\r\n        </ThemeContext.Provider>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default ThemeContextProvider;","import React, { useContext } from 'react'\r\nimport { BooksContext } from '../contexts/BooksContext'\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst BookDetails = ({ book }) => {\r\n    const { dispatch } = useContext(BooksContext);\r\n    const { theme } = useContext(ThemeContext);\r\n\r\n    return (\r\n       <li className={theme.div} >\r\n        <p onClick={()=>{dispatch({type:'REMOVE_BOOK', id:book.id})}} className={\"btn delete \"+ theme.btn}>x</p>\r\n        <p \r\n        className={\"title \" + theme.done ? \"done\":\"\" }\r\n        onDoubleClick={()=>{dispatch({type:'REMOVE_BOOK', id:book.id})}} \r\n        >{book.title}</p>\r\n\r\n       </li>\r\n    )\r\n}\r\n\r\nexport default BookDetails\r\n","import React, { useContext } from 'react'\r\nimport { BooksContext } from '../contexts/BooksContext'\r\nimport BookDetails from './BookDetails'\r\n\r\n\r\nconst BookList = () => {\r\n    const { books } = useContext(BooksContext);\r\n\r\n    return books.length ? (\r\n        <div className=\"book-list\">\r\n            <ul>\r\n                {books.map(book => {\r\n                    return(\r\n                        <BookDetails book={book} key={book.id} />\r\n                        )\r\n                })}  \r\n            </ul>\r\n        </div>\r\n    ): (\r\n        <div className=\"empty\">All Done</div>\r\n    )\r\n}\r\n\r\nexport default BookList\r\n","import React, { useContext } from 'react'\r\nimport { BooksContext } from '../contexts/BooksContext';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst Navbar = () => {\r\n    const { books } = useContext(BooksContext);\r\n    const {theme, themeDispatch } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <div className={theme.div}>\r\n        <div className=\"navbar\">\r\n        <h1>TODO List</h1>\r\n        <p>Currently you have { books.length } things to do</p> \r\n        <div>\r\n        <p className=\"btn light-btn\" onClick={()=>{themeDispatch({type: \"LIGHT\"})}}></p>\r\n        <p className=\"btn dark-btn\" onClick={()=>{themeDispatch({type: \"DARK\"})}}></p>\r\n        <p className=\"btn sky-green-btn\" onClick={()=>{themeDispatch({type: \"SKY_GREEN\"})}}></p>\r\n        <p className=\"btn light-red-btn\" onClick={()=>{themeDispatch({type: \"LIGHT_RED\"})}}></p>\r\n        <p className=\"btn pink-btn\" onClick={()=>{themeDispatch({type: \"PINK\"})}}></p>\r\n        <p className=\"btn orange-btn\" onClick={()=>{themeDispatch({type: \"ORANGE\"})}}></p>\r\n        <p className=\"btn sky-blue-btn\" onClick={()=>{themeDispatch({type: \"SKY_BLUE\"})}}></p>\r\n        <p className=\"btn dark-red-btn\" onClick={()=>{themeDispatch({type: \"DARK_RED\"})}}></p>\r\n        <p>Choose a color</p> \r\n        </div>   \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useContext, useState } from 'react'\r\nimport { BooksContext } from '../contexts/BooksContext'\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst AddBook = () => {\r\n    const { dispatch } = useContext(BooksContext);\r\n    const { theme } = useContext(ThemeContext)\r\n    const [ title, setTitle ] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({type: 'ADD_BOOK', book:{title}});\r\n        setTitle('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" className={theme.input} value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"New TODO\"  required/>\r\n            <input type=\"submit\" className={theme.btn} value=\"+\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddBook\r\n","import React, { useContext } from 'react';\nimport BooksContextProvider from './contexts/BooksContext';\nimport BookList from './components/BookList';\nimport Navbar from './components/Navbar';\nimport AddBook from './components/AddBook';\nimport { ThemeContext } from './contexts/ThemeContext';\n\nfunction App() {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <div className=\"App\">\n    <div className={theme.div}>\n    <BooksContextProvider>\n      <Navbar />\n      <AddBook />\n      <BookList/>\n      </BooksContextProvider>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './theme.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeContextProvider from './contexts/ThemeContext';\n\nReactDOM.render(\n  <React.StrictMode>\n  <ThemeContextProvider>\n    <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}